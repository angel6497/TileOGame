namespace ca.mcgill.ecse223.tileo.model;
use TileOPersistence.ump;
use PlayModeController.ump;

class TileO {
  1 <@>- * Game games;
  1 -> 0..1 Game currentGame;
}

class Game {
  mode { DESIGN{} GAME{} GAME_WON{} GAME_ROLLDIEACTIONCARD{} GAME_CONNECTTILESACTIONCARD{} GAME_REMOVECONNECTIONACTIONCARD{} GAME_TELEPORTACTIONCARD{} GAME_LOSETURNACTIONCARD{} GAME_CHOOSEMOVEACTIONCARD{} GAME_SENDBACKTOSTARTACTIONCARD{} GAME_SHOWTILESACTIONCARD{} GAME_LOSERANDOMTURNSACTIONCARD{} GAME_RESETACTIONTILESACTIONCARD{} GAME_REVEALTILEACTIONCARD{} }
  1 <@>- 2..4 Player players;
  1 <@>- * Tile tiles;
  1 <@>- * Connection connections;
  1 <@>- 1 Deck deck;
  1 <@>- 1 Die die;
  1 -> 0..1 Player currentPlayer;
  1 -> 0..1 WinTile winTile;
  const Integer SpareConnectionPieces = 32;
  Integer currentConnectionPieces;
  const Integer NumberOfActionCards = 32;
  depend ca.mcgill.ecse223.tileo.application.TileOApplication;
  depend ca.mcgill.ecse223.tileo.controller.InvalidInputException;
  
	public List<Tile> rollDie() {
		// List of tiles to return that represents possible moves
		List<Tile> tiles = new ArrayList<Tile>();
		// 'this' is the game
		Die die = this.getDie();

		// roll the die
		int dieValue = die.roll();

		// Get the current player
		Player currentPlayer = this.getCurrentPlayer();
		TileOApplication.refreshDie(dieValue);
		// TODO Check getPossibleMoves is implemented
		// Tiles is a list of possible moves the current player can make based
		// on their die role
		tiles = currentPlayer.generateMoves(dieValue);

		return tiles;
	}

	public List<Tile> rollDie(int dieValue) {
		// List of tiles to return that represents possible moves
		List<Tile> tiles = new ArrayList<Tile>();
		// 'this' is the game
		Die die = this.getDie();

		// Get the current player
		Player currentPlayer = this.getCurrentPlayer();
		TileOApplication.refreshDie(dieValue);
		// TODO Check getPossibleMoves is implemented
		// Tiles is a list of possible moves the current player can make based
		// on their die role
		tiles = currentPlayer.generateMoves(dieValue);

		return tiles;
	}

   public Connection connectTiles(Tile tileOne, Tile tileTwo) throws Exception{
    Connection connector = new Connection(this);
		if (!(getTiles().contains(tileOne)) || !(getTiles().contains(tileTwo))) {
			throw new Exception("There is no tile in that space.");
		} else if (checkAdjacentTiles(tileOne, tileTwo) == false) {
			throw new Exception("The two tiles are not adjacent thus they cannot have a connection.");
		}
		if (checkAdjacentTiles(tileOne, tileTwo)) {
			connector.addTile(tileOne);
			connector.addTile(tileTwo);
		}
		return connector;
  }
	
	public boolean checkAdjacentTiles(Tile tile1, Tile tile2)
	{
		int xOne = tile1.getX();
		int xTwo = tile2.getX();
		int yOne = tile1.getY();
		int yTwo = tile2.getY();
		boolean adjacent = false;
		if((Math.abs(xOne - xTwo) == 1) && (yOne == yTwo))
		{
			adjacent = true;
		}
		if((Math.abs(yOne - yTwo) == 1) && (xOne == xTwo))
		{
			adjacent = true;
		}
		return adjacent;
	}
	
	public Connection deleteConnection(Connection connector)
	{
		removeConnection(connector);
		connector.delete();
		
		return connector;
	}
}

class Player {
  color { RED{} BLUE{} GREEN{} YELLOW{} }
  1 -> 0..1 Tile startingTile;
  0..4 -> 0..1 Tile currentTile;
  unique Integer number;
  Integer turnsUntilActive = 0;
	playerStatus { 
	    Active {
	      loseTurns(int n) [n>0] / {
	        setTurnsUntilActive(getTurnsUntilActive() + n);
	      }  -> Inactive; 
	    } 
	    Inactive {
	      takeTurn() [getTurnsUntilActive() > 1] / { 
	    setTurnsUntilActive(getTurnsUntilActive() - 1);
	 }  -> Inactive; 
	      takeTurn() [getTurnsUntilActive() <= 1] / {
	        setTurnsUntilActive(0);
	      }  -> Active; 
	      loseTurns(int n) [n>0] / {
	        setTurnsUntilActive(getTurnsUntilActive() + n);
	      }  -> Inactive; 
	    } 
	  }
  

	public List<Tile> generateMoves(int number){
        Tile origin = this.getCurrentTile();
        List<Tile> neighbours = origin.getNeighbours(null, number);
        for(Player p : this.getGame().getPlayers()){
          while(neighbours.remove(p.getCurrentTile()));
        }
        return neighbours;
    }

}

class Tile {
  abstract;

  2 tiles -- 0..4 Connection connections;
  Integer x;
  Integer y;
  Boolean hasBeenVisited = false;
  Boolean hasBeenRevealed = false;
  
  public abstract void land();
  
  	@Override
	public boolean equals(Object other) {
		if (other == null) {
			return false;
		}
		if (((Tile) other).x == this.x && ((Tile) other).y == this.y) {
			return true;
		} else {
			return false;
		}
	}
	
	public List<Tile> getNeighbours(Tile prev, int number) {
		List<Tile> neighbours = new ArrayList<>();
		List<Connection> connections = new ArrayList<>();
		if (number == 0) {
			neighbours.add(this);
			return neighbours;
		}
		for (Connection c : this.getConnections()) {
			if (!c.getTiles().contains(prev)) {
				connections.add(c);
			}
		}
		for (Connection c : connections) {
			List<Tile> ts = c.getTiles();
			int ind = 0;
			if (ts.size() != 1) {
				ind = ts.indexOf(this) == 0 ? 1 : 0;
			}

			Tile t = ts.get(ind);
			List<Tile> ns = t.getNeighbours(this, number - 1);
			neighbours.addAll(ns);
		}
		return neighbours;
	}	

}

class ActionTile {
  isA Tile;

  immutable Integer inactivityPeriod;
  Integer turnsUntilActive= 0;
  	
	actionTileStatus {
		Active {
			deactivate() [getInactivityPeriod() > 0] / { 
				setTurnsUntilActive(getInactivityPeriod() + 1 ); 
			}  -> Inactive; 
		} 
		Inactive {
			takeTurn() [getTurnsUntilActive() > 1] / { 
				setTurnsUntilActive(getTurnsUntilActive() - 1);   
			}  -> Inactive; 
			takeTurn() [getTurnsUntilActive() <= 1] / { 
				setTurnsUntilActive(0);
			}  -> Active; 
		} 
	} 	
  
  	public void land() {
		// Get the game that this tile is a part of
		Game currentGame = this.getGame();
		// Get the player that wants to move to the tile
		Player currentPlayer = currentGame.getCurrentPlayer();
		// Set the current tile to this tile
		currentPlayer.setCurrentTile(this);
		
		currentPlayer.takeTurn();

		this.setHasBeenVisited(true);
		
		Deck deck = currentGame.getDeck();
		ActionCard currentCard = deck.getCurrentCard();
		
		currentCard.changeGameModeToActionCard();
		
		deactivate();
	}  
}

class NormalTile {
  isA Tile;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
	public void land() {
		// Get the game that this tile is a part of
		Game currentGame = this.getGame();
		// Get the player that wants to move to the tile
		Player currentPlayer = currentGame.getCurrentPlayer();
		// Set the current tile to this tile
		currentPlayer.setCurrentTile(this);

		// TODO CHECK THIS METHOD
		currentPlayer.takeTurn();

		// Get increase the index of the current player by one
		/*
		 * int nextPlayerIndex = currentGame.indexOfPlayer(currentPlayer) + 1;
		 * // Loop back if it is the last player nextPlayerIndex =
		 * nextPlayerIndex % currentGame.numberOfPlayers(); // Get the next
		 * player Player nextPlayer = currentGame.getPlayer(nextPlayerIndex); //
		 * Set the next player as the current player
		 * currentGame.setCurrentPlayer(nextPlayer);
		 */

		this.setHasBeenVisited(true);

		currentGame.setMode(Mode.GAME);
	}
  
}

class WinTile {
  isA Tile;
  depend ca.mcgill.ecse223.tileo.application.TileOApplication;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
	// TODO
   public void land(){
    // Get the game that this tile is a part of
		Game currentGame = this.getGame();
		// Get the player that wants to move to the tile
		Player currentPlayer = currentGame.getCurrentPlayer();
		// Set the current tile to this tile
		currentPlayer.setCurrentTile(this);

		//TODO CHECK THIS METHOD
		currentPlayer.takeTurn();
		
		// Get increase the index of the current player by one
		int nextPlayerIndex = currentGame.indexOfPlayer(currentPlayer) + 1;
		// Loop back if it is the last player
		nextPlayerIndex = nextPlayerIndex % currentGame.numberOfPlayers();
		// Get the next player
		Player nextPlayer = currentGame.getPlayer(nextPlayerIndex);
		// Set the next player as the current player
		currentGame.setCurrentPlayer(nextPlayer);

		this.setHasBeenVisited(true);
		
  }
  
}

class Connection {
}

class Deck {
  1 <@>- 0..32 ActionCard cards;
  1 -> 0..1 ActionCard currentCard;
  public void clearDeck(){
	  cards.clear();
  }
  
  public void shuffle() {
	if(!hasCards()){
		throw new RuntimeException("Unable to shuffle empty Deck");
	}
	//Random
    Random rand = new Random();
    
    List<ActionCard> temp = cards;
    Collections.shuffle(temp);
    //shuffle the array list called 'cards'
    Collections.shuffle(cards, rand);
	//After shuffle set the current card to the first card in the stack
	currentCard = getCard(0);
  }
}

class ActionCard {
public abstract void changeGameModeToActionCard();
  abstract;

  immutable String instructions;
}

class RollDieActionCard {
  isA ActionCard;
  depend java.util.*;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
  //Angel
	public List<Tile> play() {
		List<Tile> tiles = new ArrayList<Tile>();
		Game game = this.getDeck().getGame();
		game.setMode(Game.Mode.GAME_ROLLDIEACTIONCARD);

		tiles = game.rollDie();

		return tiles;
	}
   
	public void changeGameModeToActionCard() {
		Deck deck = this.getDeck();
		Game game = deck.getGame();
		game.setMode(Mode.GAME_ROLLDIEACTIONCARD);
	}
}

class ConnectTilesActionCard {
  isA ActionCard;
  depend ca.mcgill.ecse223.tileo.controller.*;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
  //Angel
   public void play(Tile tile1, Tile tile2) throws Exception{
    Game game = this.getDeck().getGame();

		game.connectTiles(tile1, tile2);
		game.setMode(Mode.GAME);
		System.out.println("Mode changed");
  }
  	
  public void changeGameModeToActionCard(){
	  Deck deck = this.getDeck();
	  Game game = deck.getGame();
	  game.setMode(Mode.GAME_CONNECTTILESACTIONCARD);
  }
}

class RemoveConnectionActionCard {
  isA ActionCard;
  depend ca.mcgill.ecse223.tileo.controller.InvalidInputException;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
  //Angel
	public void play(Connection aConnection) throws InvalidInputException {
		Game game = this.getDeck().getGame();
		game.deleteConnection(aConnection);
		game.setMode(Mode.GAME);
	}
  	
	public void changeGameModeToActionCard() {
		Deck deck = this.getDeck();
		Game game = deck.getGame();
		game.setMode(Mode.GAME_REMOVECONNECTIONACTIONCARD);
	}
}

class TeleportActionCard {
  isA ActionCard;
  depend ca.mcgill.ecse223.tileo.controller.InvalidInputException;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
  //Angel
	public void play(Tile tile) throws InvalidInputException {
		tile.land();
	}
	
	public void changeGameModeToActionCard() {
		Deck deck = this.getDeck();
		Game game = deck.getGame();
		game.setMode(Mode.GAME_TELEPORTACTIONCARD);
	}
}
	
class SendBackToStartActionCard {
 	isA ActionCard;
 	depend ca.mcgill.ecse223.tileo.controller.InvalidInputException;
 	depend ca.mcgill.ecse223.tileo.model.Game.Mode;
 	public void play(){
 	
	}
  
	public void changeGameModeToActionCard() {
		Deck deck = this.getDeck();
		Game game = deck.getGame();
		game.setMode(Mode.GAME_TELEPORTACTIONCARD);
	}
}

class ChooseMoveActionCard {
	isA ActionCard;
	depend java.util.*;
  //Added play method
  public List<Tile> play(int n){
	  List<Tile> tiles = new ArrayList<Tile>();
	  Game game = this.getDeck().getGame();
	  game.setMode(Game.Mode.GAME_CHOOSEMOVEACTIONCARD);
	  
	  //TODO Check this method works
	  tiles = game.getCurrentPlayer().generateMoves(n);
	  
	  return tiles;
  }
  
  public void changeGameModeToActionCard(){
	  Deck deck = this.getDeck();
	  Game game = deck.getGame();
	  game.setMode(Game.Mode.GAME_CHOOSEMOVEACTIONCARD);
  }
}

class ResetActionTilesActionCard {
	isA ActionCard;
	depend ca.mcgill.ecse223.tileo.model.*;
	depend java.util.*;
   public void play(){
    Game game = this.getDeck().getGame();
    List<Tile> tiles = game.getTiles();
	for(Tile t : tiles){
		if(t instanceof ActionTile){
			((ActionTile)t).deactivate();
		}
	}			
  }			
	  
	public void changeGameModeToActionCard() {
		// TODO Auto-generated method stub
		
	}	  
}

class RevealTileActionCard {
	isA ActionCard;
	depend ca.mcgill.ecse223.tileo.model.Game.Mode;
	depend java.util.*;
	
   	/**
	 * @author thomashillyer
	 * @param tile
	 * @return
	 * @throws InvalidInputException
	 */
	public String play(Tile tile) throws Exception {
		String type = null;
		String error = "";

		changeGameModeToActionCard();
		// player clicks tile
		// tile is revealed

		// revealed so that the board draws it a different color
		tile.setHasBeenRevealed(true);

		//return the type the tile is
		try {
			if (tile instanceof NormalTile) {
				type = "Normal Tile";
			} else if (tile instanceof ActionTile) {
				type = "Action Tile";
			} else if (tile instanceof WinTile) {
				type = "Win Tile";
			}
			return type;
		} catch (Exception e) {
			error = e.getMessage();
			throw new Exception(error);
		}

	}			
	  
	public void changeGameModeToActionCard() {
		Deck deck = this.getDeck();
		Game game = deck.getGame();
		game.setMode(Mode.GAME_REVEALTILEACTIONCARD);
	}	  
}

class LoseTurnActionCard {
  isA ActionCard;
  depend ca.mcgill.ecse223.tileo.model.Game.Mode;
  public void changeGameModeToActionCard(){
	  Deck deck = this.getDeck();
	  Game game = deck.getGame();
	  game.setMode(Mode.GAME_LOSETURNACTIONCARD);
  }
  
  public void play(){
	  Game game = this.getDeck().getGame();
	  Player player = game.getCurrentPlayer();
	  player.loseTurns(1);
  }
}

class ShowTilesActionCard{
	isA ActionCard;
	depend ca.mcgill.ecse223.tileo.model.Game.Mode;
	
	public void play(){
		Game game = this.getDeck().getGame();
		game.setMode(Game.Mode.GAME_SHOWTILESACTIONCARD);
  }

   //Change the mode to the current action card
    public void changeGameModeToActionCard(){
    Deck deck = this.getDeck();
		Game game = deck.getGame();
		game.setMode(Mode.GAME_SHOWTILESACTIONCARD);
  }
}

class LoseRandomTurnsActionCard{
	isA ActionCard;
	depend ca.mcgill.ecse223.tileo.model.Game.Mode;
	depend java.util.Random;

	public void play(){
    	Game game = this.getDeck().getGame();
		Random rand = new Random();

		for(Player p : game.getPlayers()){
			int numberOfTurnsLost = rand.nextInt(3);
			p.loseTurns(numberOfTurnsLost);
		}
  	}
	public void changeGameModeToActionCard(){
		Game game = this.getDeck().getGame();
		game.setMode(Mode.GAME_LOSERANDOMTURNSACTIONCARD);
  	}
}


class Die {
	depend java.util.Random;
	public int roll() {
		// Default value
		int dieValue = 0;
		Random rand = new Random();
		// Get a random value between 1 and 6 inclusive
		dieValue = rand.nextInt(6) + 1;
		//
		System.out.println("Roll value " + dieValue);
		return dieValue;
	}
}
